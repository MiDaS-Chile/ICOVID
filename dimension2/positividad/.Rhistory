## Estandarizar texto comuna
matchgeo$comuna_residencia <- tolower(str_replace_all(matchgeo$comuna_residencia, "[[:punct:]]", " "))
matchgeo$comuna_residencia <- stringi::stri_trans_general(matchgeo$comuna_residencia,"Latin-ASCII")
datos.epi$comuna_residencia <- tolower(str_replace_all(datos.epi$comuna_residencia, "[[:punct:]]", " "))
datos.epi$comuna_residencia <- stringi::stri_trans_general(datos.epi$comuna_residencia,"Latin-ASCII")
### Formato equivalente para comunas con variaciones
matchgeo$comuna_residencia <- ifelse(matchgeo$comuna_residencia=="coihaique","coyhaique",
matchgeo$comuna_residencia)
matchgeo$comuna_residencia <- ifelse(matchgeo$comuna_residencia=="concon","con con",
matchgeo$comuna_residencia)
### Transformar a NA los desconocidos o ""
datos.epi$comuna_residencia <- ifelse(datos.epi$comuna_residencia=="desconocido", NA,
datos.epi$comuna_residencia)
datos.epi$comuna_residencia <- ifelse(datos.epi$comuna_residencia=="", NA,
datos.epi$comuna_residencia)
### Tratar codigos como numeric
matchgeo$codigo_comuna <- as.integer(matchgeo$codigo_comuna)
matchgeo$codigo_provincia <- as.integer(matchgeo$codigo_provincia)
matchgeo$codigo_region <- as.integer(matchgeo$codigo_region)
## Match
datos.epi <- left_join(datos.epi , matchgeo, by="comuna_residencia")
## Validar que NA de comuna y provincia sean los mismos
table(is.na(datos.epi$comuna_residencia))
table(is.na(datos.epi$provincia_residencia))  # Misma cantidad de NA para provincia y comuna
tasa.data.correo <- data %>% group_by(Fechadecorreo) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
sum(poblacion.region$pob)
tasa.data.correo <- data %>% group_by(Fechadecorreo) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
mutate(tasatest = freq/sum(poblacion.region$pob)*100000) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo
View(tasa.data.correo)
sumarry(data$Fechadecorreo)
sumary(data$Fechadecorreo)
summary(data$Fechadecorreo)
summary(data$FechadeResultado)
summary(data$Fechatomademuestra)
# Load data
load("~/Dropbox/Data MINSAL/data/20200718_EPV(resumen).RData")
load("~/Dropbox/Data MINSAL/data/20200718_LAB(resumen).RData")
datos.epi <- EPIJARA
data <- labConsultasJC
rm(EPIJARA, labConsultasJC)
matchgeo <- read_excel("~/Dropbox/Data MINSAL/data/Match comuna -provincia - region.xls")
matchgeo <- matchgeo %>% rename(comuna_residencia=`Nombre Comuna`,
provincia_residencia=`Nombre Provincia`,
codigo_comuna=`Código Comuna 2017`,
codigo_provincia=`Código Provincia`,
codigo_region=`Código Región`)
poblacion <- read_excel("~/Dropbox/Data MINSAL/data/poblacion.xlsx")
poblacion <- poblacion %>% rename(codigo_comuna=Comuna, codigo_provincia=Provincia, codigo_region=Codigo.region, pob=`2020`) %>%
select(codigo_comuna,codigo_provincia,codigo_region,pob)
poblacion.comuna <- poblacion %>% group_by(codigo_comuna) %>% summarise(pob=sum(pob, na.rm=T))
poblacion.provincia <- poblacion %>% group_by(codigo_provincia) %>% summarise(pob=sum(pob, na.rm=T))
poblacion.region <- poblacion %>% group_by(codigo_region) %>% summarise(pob=sum(pob, na.rm=T))
# Fix date data
data$Fechatomademuestra <- as.Date(as.numeric(data$Fechatomademuestra), "1899-12-30")
data$FechadeResultado <- as.Date(as.numeric(data$FechadeResultado), "1899-12-30")
data$Fechadecorreo <- as.Date(as.numeric(data$Fechadecorreo), "1899-12-30")
summary(data$Fechatomademuestra)
summary(data$FechadeResultado)
summary(data$Fechadecorreo)
# Round date data to day level
summary(data$Fechatomademuestra <- round_date(data$Fechatomademuestra, "day"))
datos.epi$fecha_notificacion <- as.Date(datos.epi$fecha_notificacion)
datos.epi$fecha_primeros_sintomas <- as.Date(datos.epi$fecha_primeros_sintomas, "%Y-%m-%d")
# Round date data to day level
data$Fechatomademuestra <- round_date(data$Fechatomademuestra, "day")
data$FechadeResultado <- round_date(data$FechadeResultado, "day")
data$Fechadecorreo <- round_date(data$Fechadecorreo, "day")
summary(data$Fechatomademuestra)
summary(data$FechadeResultado)
summary(data$Fechadecorreo)
# Fix string data
datos.epi$sintomas <- ifelse(datos.epi$sintomas=="", NA, datos.epi$sintomas)
# Fix id data
datos.epi$id <- as.integer(datos.epi$id)
data$id <- as.integer(data$id)
## Estandarizar texto comuna
matchgeo$comuna_residencia <- tolower(str_replace_all(matchgeo$comuna_residencia, "[[:punct:]]", " "))
matchgeo$comuna_residencia <- stringi::stri_trans_general(matchgeo$comuna_residencia,"Latin-ASCII")
datos.epi$comuna_residencia <- tolower(str_replace_all(datos.epi$comuna_residencia, "[[:punct:]]", " "))
datos.epi$comuna_residencia <- stringi::stri_trans_general(datos.epi$comuna_residencia,"Latin-ASCII")
### Formato equivalente para comunas con variaciones
matchgeo$comuna_residencia <- ifelse(matchgeo$comuna_residencia=="coihaique","coyhaique",
matchgeo$comuna_residencia)
matchgeo$comuna_residencia <- ifelse(matchgeo$comuna_residencia=="concon","con con",
matchgeo$comuna_residencia)
### Transformar a NA los desconocidos o ""
datos.epi$comuna_residencia <- ifelse(datos.epi$comuna_residencia=="desconocido", NA,
datos.epi$comuna_residencia)
datos.epi$comuna_residencia <- ifelse(datos.epi$comuna_residencia=="", NA,
datos.epi$comuna_residencia)
### Tratar codigos como numeric
matchgeo$codigo_comuna <- as.integer(matchgeo$codigo_comuna)
matchgeo$codigo_provincia <- as.integer(matchgeo$codigo_provincia)
matchgeo$codigo_region <- as.integer(matchgeo$codigo_region)
## Match
datos.epi <- left_join(datos.epi , matchgeo, by="comuna_residencia")
## Validar que NA de comuna y provincia sean los mismos
table(is.na(datos.epi$comuna_residencia))
table(is.na(datos.epi$provincia_residencia))  # Misma cantidad de NA para provincia y comuna
tasa.data.correo <- data %>% group_by(Fechadecorreo) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(freq = n / sum(n)) %>%
mutate(tasatest = freq/sum(poblacion.region$pob)*100000) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo
tasa.data.correo <- data %>% group_by(Fechadecorreo) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(tasatest = n/sum(poblacion.region$pob)*100000) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo
View(tasa.data.correo)
# Save
tasa.test.data.icovid <- tasa.data.correo %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest)
write_csv(tasa.test.data.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.csv")
tasa.data.correo.reg <- data %>% group_by(Fechadecorreo, codigo_region, region_residencia) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
# Deduplicación de misma fecha de muestra y resultado para el mismo id.
# Elegimos una sola observación para cada test repetido.
data <- data %>% group_by(id,  Fechatomademuestra, resul) %>%
slice(which.min(Fechadecorreo)) %>%
filter(row_number()==1)
# Deduplicar variables de residencia con una observación por id en la base de epi
# Seleccionamos la fecha de toma de muestra más reciente para cada id
# Dejamos los datos de residencia más repetidos en casos con múltiples entradas
datos.epi <- datos.epi %>%  group_by(id, region_residencia, provincia_residencia, comuna_residencia) %>%
slice(which.max(fecha_notificacion)) %>%
group_by(id) %>%
filter(row_number()==1) %>%
select(id, region_residencia, provincia_residencia, comuna_residencia, codigo_comuna, codigo_provincia, codigo_region)
# Merge de base de labs con datos de residencia (región y provincia)
data <- left_join(data, datos.epi, by="id")
# Pasar de 3 categorías a 2 categorías resultado (1==positivo)
table(data$resul)
data$resul <- ifelse(data$resul=="POSITIVO",1,0)
table(data$resul)
tasa.data.correo.reg <- data %>% group_by(Fechadecorreo, codigo_region, region_residencia) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo.reg
tasa.data.correo.reg <- left_join(tasa.data.correo.reg,poblacion.region)
tasa.data.correo.reg <- tasa.data.correo.reg %>% mutate(tasatest=n/pob*100000)
tasa.data.correo.reg
# Save
tasa.test.data.reg.icovid <- tasa.data.correo.reg %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_region, region_residencia)
tasa.test.data.reg.icovid
tasa.data.correo <- data %>% group_by(Fechadecorreo) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(tasatest = n/sum(poblacion.region$pob)*1000) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
# Save
tasa.test.data.icovid <- tasa.data.correo %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest)
write_csv(tasa.test.data.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.csv")
tasa.data.correo.reg <- data %>% group_by(Fechadecorreo, codigo_region, region_residencia) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo.reg <- left_join(tasa.data.correo.reg,poblacion.region)
tasa.data.correo.reg <- tasa.data.correo.reg %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.reg.icovid <- tasa.data.correo.reg %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_region, region_residencia)
write_csv(tasa.test.data.reg.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/regional/tasa test regional.csv")
tasa.data.correo.prov <- data %>% group_by(Fechadecorreo, codigo_provincia, provincia_residencia) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo.prov <- left_join(tasa.data.correo.prov,poblacion.provincia)
tasa.data.correo.prov <- tasa.data.correo.prov %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.prov.icovid <- tasa.data.correo.prov %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_provincia, provincia_residencia)
# Save
tasa.test.data.prov.icovid <- tasa.data.correo.prov %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_provincia, provincia_residencia)
write_csv(tasa.test.data.prov.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/provincial/tasa test provincial.csv")
write_csv(tasa.test.data.prov.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/provincia/tasa test provincial.csv")
write_csv(tasa.test.data.prov.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/provincial/tasa test provincial.csv")
tasa.data.correo.comuna <- data %>% group_by(Fechadecorreo, codigo_comuna, comuna_residencia) %>%
select(id, Fechadecorreo) %>%
summarise (n = n()) %>%
mutate(fecha=Fechadecorreo, serie="Fecha de correo") %>%
ungroup() %>%
select(-Fechadecorreo)
tasa.data.correo.comuna <- left_join(tasa.data.correo.comuna,poblacion.comuna)
tasa.data.correo.comuna <- tasa.data.correo.comuna %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.comuna.icovid <- tasa.data.correo.comuna %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_comuna, comuna_residencia)
write_csv(tasa.test.data.comuna.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/comunal/tasa test comunal.csv")
tasa.test.data.comuna.icovid
# Serie nacional para ICOVID
ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=0.03, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=0.05, linetype="dashed", color="orange") +
geom_hline(yintercept=0.1, linetype="dashed", color="red") +
ylim(0,10) + theme_minimal()
# Serie nacional para ICOVID
ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=0.03, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=0.05, linetype="dashed", color="orange") +
geom_hline(yintercept=0.1, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
# Serie nacional para ICOVID
ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=3, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=2, linetype="dashed", color="orange") +
geom_hline(yintercept=1, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
# Serie regional para ICOVID
ggplot(pos.data.reg.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
# Serie regional para ICOVID
ggplot(tasa.test.data.reg.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
# Serie regional para ICOVID
ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
# Serie regional para ICOVID
ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(provincia_residencia~.)
# Save
tasa.test.data.reg.icovid <- tasa.data.correo.reg %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) & !is.na(codigo_region)) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_region, region_residencia)
# Save
tasa.test.data.prov.icovid <- tasa.data.correo.prov %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) & !is.na(codigo_provincia)) %>%
arrange(fecha) %>% dplyr::select(fecha, tasatest, codigo_provincia, provincia_residencia)
# Save
tasa.test.data.comuna.icovid <- tasa.data.correo.comuna %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) !is.na(codigo_comuna)) %>%
arrange(fecha) %>% dplyr::select(fecha, tasatest, codigo_comuna, comuna_residencia)
# Save
tasa.test.data.comuna.icovid <- tasa.data.correo.comuna %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))  & !is.na(codigo_comuna)) %>%
arrange(fecha) %>% dplyr::select(fecha, tasatest, codigo_comuna, comuna_residencia)
# Serie provincial para ICOVID
ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,1) + theme_minimal() + facet_wrap(provincia_residencia~.)
# Serie provincial para ICOVID
ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(provincia_residencia~.)
tasa.data.correo.reg <- data %>% group_by(Fechatomademuestra, codigo_region, region_residencia) %>%
select(id, Fechatomademuestra) %>%
summarise (n = n()) %>%
mutate(fecha=Fechatomademuestra) %>%
ungroup() %>%
select(-Fechatomademuestra)
tasa.data.correo.reg <- left_join(tasa.data.correo.reg,poblacion.region)
tasa.data.correo.reg <- tasa.data.correo.reg %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.reg.icovid <- tasa.data.correo.reg %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) & !is.na(codigo_region)) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_region, region_residencia)
# Serie regional para ICOVID
ggplot(tasa.test.data.reg.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
# Serie Nacional
tasa.data.correo <- data %>% group_by(Fechatomademuestra) %>%
select(id, Fechatomademuestra) %>%
summarise (n = n()) %>%
mutate(tasatest = n/sum(poblacion.region$pob)*1000) %>%
mutate(fecha=Fechatomademuestra) %>%
ungroup() %>%
select(-Fechatomademuestra)
# Save
tasa.test.data.icovid <- tasa.data.correo %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest)
write_csv(tasa.test.data.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.csv")
# Serie data regional (Región residencia de Epivigila)
tasa.data.correo.reg <- data %>% group_by(Fechatomademuestra, codigo_region, region_residencia) %>%
select(id, Fechatomademuestra) %>%
summarise (n = n()) %>%
mutate(fecha=Fechatomademuestra) %>%
ungroup() %>%
select(-Fechatomademuestra)
tasa.data.correo.reg <- left_join(tasa.data.correo.reg,poblacion.region)
tasa.data.correo.reg <- tasa.data.correo.reg %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.reg.icovid <- tasa.data.correo.reg %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) & !is.na(codigo_region)) %>% arrange(fecha) %>%
dplyr::select(fecha, tasatest, codigo_region, region_residencia)
write_csv(tasa.test.data.reg.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/regional/tasa test regional.csv")
# Serie data provincial
tasa.data.correo.prov <- data %>% group_by(Fechatomademuestra, codigo_provincia, provincia_residencia) %>%
select(id, Fechatomademuestra) %>%
summarise (n = n()) %>%
mutate(fecha=Fechatomademuestra) %>%
ungroup() %>%
select(-Fechatomademuestra)
tasa.data.correo.prov <- left_join(tasa.data.correo.prov,poblacion.provincia)
tasa.data.correo.prov <- tasa.data.correo.prov %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.prov.icovid <- tasa.data.correo.prov %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo)) & !is.na(codigo_provincia)) %>%
arrange(fecha) %>% dplyr::select(fecha, tasatest, codigo_provincia, provincia_residencia)
write_csv(tasa.test.data.prov.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/provincial/tasa test provincial.csv")
# Serie data comunal
tasa.data.correo.comuna <- data %>% group_by(Fechatomademuestra, codigo_comuna, comuna_residencia) %>%
select(id, Fechatomademuestra) %>%
summarise (n = n()) %>%
mutate(fecha=Fechatomademuestra) %>%
ungroup() %>%
select(-Fechatomademuestra)
tasa.data.correo.comuna <- left_join(tasa.data.correo.comuna,poblacion.comuna)
tasa.data.correo.comuna <- tasa.data.correo.comuna %>% mutate(tasatest=n/pob*1000)
# Save
tasa.test.data.comuna.icovid <- tasa.data.correo.comuna %>% filter(fecha>as.Date("2020-03-01") & fecha<as.Date(max(data$Fechadecorreo))  & !is.na(codigo_comuna)) %>%
arrange(fecha) %>% dplyr::select(fecha, tasatest, codigo_comuna, comuna_residencia)
write_csv(tasa.test.data.comuna.icovid, "~/Documents/GitHub/ICOVID/dimension2/tasatest/comunal/tasa test comunal.csv")
###################################################################################
## Visualizaciones
###################################################################################
# Serie nacional para ICOVID
ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
# Serie regional para ICOVID
ggplot(tasa.test.data.reg.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
# Serie provincial para ICOVID
ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(provincia_residencia~.)
graph.prov
# Serie provincial para ICOVID
graph.prov <- ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(provincia_residencia~.)
graph.prov
graph.nacional <- ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha toma de muestra", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
graph.nacional
ggsave(graph.nacional, "~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional",
width = 14.6*2, height = 9.6*2, units = "cms")
graph.nacional
ggsave(graph.nacional, "~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.pdf",
width = 14.6*2, height = 9.6*2, units = "cms")
ggsave(graph.nacional, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.pdf",
width = 14.6*2, height = 9.6*2, units = "cms")
ggsave(graph.nacional, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.pdf",
width = 14.6*2, height = 9.6*2, units = "cm")
graph.nacional <- ggplot(tasa.test.data.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha toma de muestra", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal()
graph.nacional
ggsave(graph.nacional, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/nacional/tasa test nacional.pdf",
width = 14.6*2, height = 9.6*2, units = "cm")
graph.reg <- ggplot(tasa.test.data.reg.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha toma de muestra", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(region_residencia~.)
graph.reg
ggsave(graph.reg, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/regional/tasa test regional.pdf",
width = 14.6*2, height = 9.6*2, units = "cm")
ggsave(graph.reg, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/regional/tasa test regional.pdf",
width = 14.6*2, height = 9.6*2, units = "cm")
# Serie provincial para ICOVID
graph.prov <- ggplot(tasa.test.data.prov.icovid,
aes(x=fecha, y=tasatest)) +
geom_point(alpha=0.2) +
geom_line() +
labs(x="Fecha toma de muestra", y="Tasa de test diarios por 1000 habitantes") +
geom_hline(yintercept=2, linetype="dashed", color="seagreen3") +
geom_hline(yintercept=1, linetype="dashed", color="orange") +
geom_hline(yintercept=0.5, linetype="dashed", color="red") +
ylim(0,5) + theme_minimal() + facet_wrap(provincia_residencia~.)
graph.prov
ggsave(graph.prov, filename="~/Documents/GitHub/ICOVID/dimension2/tasatest/provincial/tasa test provincial.pdf",
width = 14.6*2, height = 9.6*2, units = "cm")
